pipeline {
  
  parameters {
    string(name: 'environment', defaultValue: 'dev', description: 'Workspace/environment file to use for deployment')
    booleanParam(name : 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
  }
  
  /*environment{
    aws_access_key = credentials('aws_access_key')
    aws_secret_key = credentials('aws_secret_key')
    
  }*/

  agent any

  tools {
     terraform 'terraform-10'
  }
 
  options {
    skipDefaultCheckout(true)
  }
  stages{
  
    stage('AWS credentials configuration') {
      steps {
        withAWS(credentials: '5249510b-136c-4fd9-a903-51a6665faa32'){}
        }
       }
    
    stage('clean workspace') {
      steps {
        cleanWs()
      }
    }
    
    stage('checkouts3') {
 
 steps{
     sh  'git clone https://55ce1e92-f249-42a0-b02d-465a544f0bc9@github.com/Shantanusri123/s3.git' 
  }  
 }

 stage('checkoutsg') {
 
 steps{
     sh  'git clone https://55ce1e92-f249-42a0-b02d-465a544f0bc9@github.com/Shantanusri123/security_group.git' 
  }  
 }

 stage('checkoutsgtfvars') {

 steps{
     sh  'git clone https://55ce1e92-f249-42a0-b02d-465a544f0bc9@github.com/Shantanusri123/security_group_tfvars.git' 
  } 
}

 stage('checkoutec2') {
 
 steps{
     sh  'git clone https://55ce1e92-f249-42a0-b02d-465a544f0bc9@github.com/Shantanusri123/ec2-Instance.git' 
  } 
}

 stage('checkoutec2tfvars') {
  steps{
       sh  'git clone https://55ce1e92-f249-42a0-b02d-465a544f0bc9@github.com/Shantanusri123/ec2-instance-tfvars.git'
    }
 }
 
 stage('terraform init-s3') {
      steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/s3" init '
      }
    }
    stage('terraform plan s3') {
      steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/s3" plan -var-file="${environment}.tfvars"'
      }
    }
    stage('terraform apply s3') {
       input{
          message "Do you want to proceed for ${environment} deployment?"
       }
       steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/s3" apply -auto-approve -var-file="${environment}.tfvars"'
      }
    }
    
    stage('terraform init-sg') {
      steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/security_group" init -backend-config="../security_group_tfvars/${environment}-backend.tfvars"'
      }
    }
    
     stage('terraform plan sg') {
      steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/security_group" plan -var-file="../security_group_tfvars/${environment}.tfvars"'
      }
    }

     stage('terraform apply sg') {
       input{
          message "Do you want to proceed for ${environment} deployment?"
       }
       steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/security_group" apply -auto-approve -var-file="../security_group_tfvars/${environment}.tfvars"'
      }
    }
    
    stage('terraform init-ec2') {
      steps {
        sh 'terraform  -chdir="/var/jenkins_home/workspace/jenkins-test/ec2-Instance" init -upgrade'
      }
    }

     stage('terraform plan ec2') {
      steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/ec2-Instance" plan -var-file="../ec2-instance-tfvars/${environment}.tfvars"'
      }
    }

     stage('terraform apply ec2') {
      input{
          message "Do you want to proceed for ${environment} deployment?"
       }
      steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/ec2-Instance" apply -auto-approve -var-file="../ec2-instance-tfvars/${environment}.tfvars"'
      }
    }
    
     /*stage('terraform destroy s3') {
      input{
          message "Do you want to destroy remote state file for ${environment} deployment?"
       }
      steps {
        sh 'terraform -chdir="/var/jenkins_home/workspace/jenkins-test/s3" destroy  -auto-approve -var-file="../security_group_tfvars/${environment}.tfvars"'
      }
    }*/

   
 }
}
